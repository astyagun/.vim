global !p

def write_instance_vars(arglist, snip):
	args = str(arglist).split(',')
	for arg in args:
		name = arg.strip().replace(':', ' ').split(' ', 1)[0]
		if name:
			snip += '    @{} = {}'.format(name, name)
		else:
			snip += ''

endglobal

snippet rspec
require "rails_helper"

RSpec.describe ${1:`!v substitute(substitute(expand('%:p:t:r'), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
	${3}
end
endsnippet

snippet letsm "let with super().merge" b
let(:${1:options}) { super().merge(${0}) }
endsnippet

snippet ra
require "rspec/autorun"

class ${1:Sandbox}
	def call(${2})`!p write_instance_vars(t[2],snip)`
		${0}
	end
end

RSpec.describe $1 do
	let(:instance) { described_class.new }

	describe "#call" do
		subject { instance.call(**arguments) }

		let(:arguments) { {$2} }

		it { is_expected.to eq ${4} }
	end
end
endsnippet

snippet pry
binding.pry
endsnippet

snippet .tp ".tap(&method(:pp))" w
.tap(&method(:pp))
endsnippet
